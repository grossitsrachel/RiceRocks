import simplegui
import math
import random

WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5
started = False
rock_count = 0
remove_group_set = set([])
explosion_group = set([])

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2013.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")


soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.ogg")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.ogg")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.ogg")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.ogg")

def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
        
    def shoot(self):
        global missile_group
        #pos, vel, ang, ang_vel, image, info, sound
        mis_pos = [(self.pos[0] + (self.radius * angle_to_vector(self.angle)[0])), (self.pos[1] + (self.radius * angle_to_vector(self.angle)[1]))]
        mis_vel = [(self.vel[0]) + (angle_to_vector(self.angle)[0]), (self.vel[1]) + (angle_to_vector(self.angle)[1])]
        a_missile = Sprite(mis_pos, mis_vel, 0, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
        
                 
    def draw(self,canvas):
        if self.thrust == True:
            canvas.draw_image(self.image, [(self.image_center[0] + 90), self.image_center[1]], self.image_size, self.pos, self.image_size, self.angle)
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        acc = .1
        friction = .98
        self.angle += self.angle_vel
        if self.thrust == True:
            vector_x = angle_to_vector (self.angle)[0]
            self.vel[0] += (acc * vector_x)
            self.vel[0] *= friction
            vector_y = angle_to_vector (self.angle)[1]
            self.vel[1] += (acc * vector_y)
            self.vel[1] *= friction
            ship_thrust_sound.play()
        elif self.thrust == False:
            self.vel[1] *= friction
            self.vel[0] *= friction
            ship_thrust_sound.pause()
            ship_thrust_sound.rewind()
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
    
    
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
             
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
            
    def collide(self, other_object):
        other_pos = other_object.get_position()
        dist1 = self.pos[0] - other_pos[0]
        dist2 = self.pos[1] - other_pos[1]
        if (abs(dist1)) < (self.radius + other_object.get_radius()) and (abs(dist2)) < (self.radius + other_object.get_radius()):
            return True
        else:
            return False
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        if self.animated == True:
            image_center = [self.image_center[0] + self.age * self.image_size[0], self.image_center[1]]
            canvas.draw_image(explosion_image, image_center, self.image_size, self.pos, self.image_size)
    
    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        self.angle += self.angle_vel        
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        self.age += 0.5
        if self.age < self.lifespan:
            return False
        else:
            return True

def click(pos):
    global started
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        
           
def draw(canvas):
    global time, lives, score, started
    
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_text("Lives: " + str(lives), [(WIDTH - 775), 45], 20, "White")
    canvas.draw_text("Score: " + str(score), [(WIDTH - 100), 45], 20, "White")

    my_ship.draw(canvas)
    
    if (group_collide(rock_group, my_ship)) == True:
        lives -= 1
    score += group_group_collide(missile_group, rock_group)
    
    if lives == 0:
        score = 0
        lives = 3
        started = False
        remove_set = set([])
        for item in rock_group:
            remove_set.add(item)
        rock_group.difference_update(remove_set)
            
        
    
    my_ship.update()
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)  
    process_sprite_group(explosion_group, canvas)

    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
        soundtrack.rewind()
    soundtrack.play()
            

def process_sprite_group(group, canvas):
    remove_set = set([])
    for item in group:
        item.draw(canvas)
        item.update()
        if item.update() == True:
            remove_set.add(item)
    group.difference_update(remove_set)
        
def group_collide(group, other_object):
    global remove_group_set, rock_count, explosion_group
    remove_set = set([])
    collided1 = len(group)
    for item in group:
        if item.collide(other_object) == True:
            remove_set.add(item)
            remove_group_set.add(other_object)
            rock_count -= 1
            explosion = Sprite(item.get_position(), [0, 0], 0, 0, explosion_image, explosion_info, explosion_sound)
            explosion_group.add(explosion)
    group.difference_update(remove_set)
    collided2 = len(group)
    if collided1 > collided2:
        return True
    return False
    
def group_group_collide(group1, group2):
    global remove_group_set
    for item in group1:
        group_collide(group2, item)
    collided = len(group1)
    group1.difference_update(remove_group_set)
    collided -= len(group1)
    return collided
            
def keydown(key):
    global my_ship
    acc = 0.08
    if key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel -= acc
        
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel += acc
        
    if key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = True
        
    if key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()
        
def keyup(key):
    global my_ship
    if key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0
        
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
        
    if key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = False
        
def rock_spawner():
    global rock_group, rock_count, started, my_ship
    
    if rock_count < 13 and started == True:
        pos = [(random.randrange(0, WIDTH)), (random.randrange(0, HEIGHT))]
        vel = [(random.randrange(-7, 7) * .1), (random.randrange(-7, 7) * .1)]
        angle_vel = (random.randrange(-8, 8) * .01)
        
        dist1 = pos[0] - my_ship.get_position()[0]
        dist2 = pos[1] - my_ship.get_position()[1]
        if ((abs(dist1)) > 15) and ((abs(dist2)) > 15):
            a_rock = Sprite(pos, vel, 0, angle_vel, asteroid_image, asteroid_info)
            rock_group.add(a_rock)
            rock_count += 1
    
    
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
rock_group = set([])
missile_group = set([])


frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)
timer = simplegui.create_timer(1000.0, rock_spawner)

timer.start()
frame.start()
